package com.ym.game.plugin.google.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_PURCHASE_BEAN".
*/
public class LocalPurchaseBeanDao extends AbstractDao<LocalPurchaseBean, Long> {

    public static final String TABLENAME = "LOCAL_PURCHASE_BEAN";

    /**
     * Properties of entity LocalPurchaseBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property GameOrderId = new Property(2, String.class, "gameOrderId", false, "GAME_ORDER_ID");
        public final static Property GoogleOrderId = new Property(3, String.class, "googleOrderId", false, "GOOGLE_ORDER_ID");
        public final static Property PurchaseToken = new Property(4, String.class, "purchaseToken", false, "PURCHASE_TOKEN");
        public final static Property GoogleAccountId = new Property(5, String.class, "googleAccountId", false, "GOOGLE_ACCOUNT_ID");
        public final static Property ProductId = new Property(6, String.class, "productId", false, "PRODUCT_ID");
        public final static Property PackageName = new Property(7, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property PurchaseState = new Property(8, int.class, "purchaseState", false, "PURCHASE_STATE");
        public final static Property PurchaseTime = new Property(9, long.class, "purchaseTime", false, "PURCHASE_TIME");
    }


    public LocalPurchaseBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocalPurchaseBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_PURCHASE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"GAME_ORDER_ID\" TEXT," + // 2: gameOrderId
                "\"GOOGLE_ORDER_ID\" TEXT," + // 3: googleOrderId
                "\"PURCHASE_TOKEN\" TEXT," + // 4: purchaseToken
                "\"GOOGLE_ACCOUNT_ID\" TEXT," + // 5: googleAccountId
                "\"PRODUCT_ID\" TEXT," + // 6: productId
                "\"PACKAGE_NAME\" TEXT," + // 7: packageName
                "\"PURCHASE_STATE\" INTEGER NOT NULL ," + // 8: purchaseState
                "\"PURCHASE_TIME\" INTEGER NOT NULL );"); // 9: purchaseTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_PURCHASE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalPurchaseBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
 
        String gameOrderId = entity.getGameOrderId();
        if (gameOrderId != null) {
            stmt.bindString(3, gameOrderId);
        }
 
        String googleOrderId = entity.getGoogleOrderId();
        if (googleOrderId != null) {
            stmt.bindString(4, googleOrderId);
        }
 
        String purchaseToken = entity.getPurchaseToken();
        if (purchaseToken != null) {
            stmt.bindString(5, purchaseToken);
        }
 
        String googleAccountId = entity.getGoogleAccountId();
        if (googleAccountId != null) {
            stmt.bindString(6, googleAccountId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(7, productId);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(8, packageName);
        }
        stmt.bindLong(9, entity.getPurchaseState());
        stmt.bindLong(10, entity.getPurchaseTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalPurchaseBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
 
        String gameOrderId = entity.getGameOrderId();
        if (gameOrderId != null) {
            stmt.bindString(3, gameOrderId);
        }
 
        String googleOrderId = entity.getGoogleOrderId();
        if (googleOrderId != null) {
            stmt.bindString(4, googleOrderId);
        }
 
        String purchaseToken = entity.getPurchaseToken();
        if (purchaseToken != null) {
            stmt.bindString(5, purchaseToken);
        }
 
        String googleAccountId = entity.getGoogleAccountId();
        if (googleAccountId != null) {
            stmt.bindString(6, googleAccountId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(7, productId);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(8, packageName);
        }
        stmt.bindLong(9, entity.getPurchaseState());
        stmt.bindLong(10, entity.getPurchaseTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalPurchaseBean readEntity(Cursor cursor, int offset) {
        LocalPurchaseBean entity = new LocalPurchaseBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gameOrderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // googleOrderId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // purchaseToken
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // googleAccountId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // productId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // packageName
            cursor.getInt(offset + 8), // purchaseState
            cursor.getLong(offset + 9) // purchaseTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalPurchaseBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setGameOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoogleOrderId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPurchaseToken(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoogleAccountId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProductId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPackageName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPurchaseState(cursor.getInt(offset + 8));
        entity.setPurchaseTime(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalPurchaseBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalPurchaseBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalPurchaseBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
